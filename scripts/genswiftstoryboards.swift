#!/usr/bin/env xcrun --sdk macosx swift

// genswift.sh --storyboards-dir ./ --storyboards-src Storyboards.swift --storyboards-import MMDrawerController

// swiftlint:disable cyclomatic_complexity

import Foundation

let outputPath = CommandLine.arguments[1]
let imports = CommandLine.arguments[2]

var tabs = 0

extension String {
	mutating func addLine(_ line: String = "") {
		
		if line.suffix(1) == "}" {
			tabs -= 1
		}
		if tabs > 0 {
			self += String(repeating: "\t", count: tabs)
		}

		self += "\(line)\n"

		if line.suffix(1) == "{" {
			tabs += 1
		}
	}

	func uncapitalized() -> String {
		return replacingCharacters(in: startIndex..<index(startIndex, offsetBy:1), with: self[startIndex...startIndex].lowercased())
	}

    func capitalizingFirstLetter() -> String {
      return prefix(1).uppercased() + self.dropFirst()
    }
}

func validSwiftString(_ string: String) -> Bool {
	guard !string.isEmpty else {
		return false
	}
	let invalidSet = CharacterSet.alphanumerics.union(CharacterSet(charactersIn: "_")).inverted
	if string.rangeOfCharacter(from: invalidSet) != nil {
		return false
	}
	if let first = string.unicodeScalars.first, CharacterSet.decimalDigits.contains(first) {
		return false
	}
	return true
}

var outputString = ""

outputString.addLine("""
// autogenerated by genswiftstoryboards.swift

import UIKit
import ExtraKit
""")

imports.components(separatedBy: " ").filter {
	$0 != "none"
}.forEach {
	outputString.addLine("import \($0)")
}
outputString.addLine("")

func generateStoryboardIdentifierSourceFile(_ path: String) {
	do {
		let url = URL(fileURLWithPath: path)
		let doc = try XMLDocument(contentsOf: url, options: [])
		var vcs = [XMLElement]()
		if let cs = try doc.nodes(forXPath:"//viewController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//tableViewController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//tabBarController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//navigationController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//splitViewController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//viewControllerPlaceholder") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//collectionViewController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//pageViewController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//embed") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		guard vcs.count > 0 else {
			return
		}
		
		let ids: [(storyboardIdentifier: String, id: String, customClass: String, segues: [String])]! = vcs.compactMap { svc in
			if let storyboardIdentifier = svc.attribute(forName:"storyboardIdentifier")?.stringValue
			, let id = svc.attribute(forName:"id")?.stringValue {
				let customClass = svc.attribute(forName: "customClass")?.stringValue ?? "UIViewController"
				var segues = [String]()
				if let segueNodes = try? svc.nodes(forXPath:"..//segue") {
					segueNodes.forEach {
						if let elem = ($0 as? XMLElement),
							let identifier = elem.attribute(forName:"identifier")?.stringValue,
							!identifier.isEmpty {
							segues.append(identifier)
						}
					}
				}
				return (storyboardIdentifier, id, customClass, segues)
			}
			return nil
		}
		guard ids.isEmpty == false else { return }
		
		let fileName = url.deletingPathExtension().lastPathComponent
		if validSwiftString(fileName) {
			outputString.addLine("struct Storyboard\(fileName) {")
			outputString.addLine()
			
			ids.forEach {
				if validSwiftString($0.storyboardIdentifier) {
					outputString.addLine("struct \($0.storyboardIdentifier): StoryboardScene {")
					outputString.addLine("typealias StoryboardClass = \($0.customClass)")

					if !$0.segues.isEmpty {
						$0.segues.forEach { segue in
							if validSwiftString(segue) {
								outputString.addLine("let segue\(segue.capitalizingFirstLetter())  = \"\(segue)\"")
							}
						}
					}
					outputString.addLine("let identifier = (\"\($0.storyboardIdentifier)\", \"\(fileName)\")")
					outputString.addLine("}")
					outputString.addLine("let \($0.storyboardIdentifier.uncapitalized()) = \($0.storyboardIdentifier)()")
					outputString.addLine("")
				}
			}

			outputString.addLine("}")
			outputString.addLine("let storyboard\(fileName) = Storyboard\(fileName)()")
		}
		outputString.addLine()
	} catch _ {

	}
}

outputString += """
/**
	Generated from the storyboards used by the app.
*/

"""
CommandLine.arguments[3..<CommandLine.arguments.count].sorted { $0 < $1 }.forEach {
	generateStoryboardIdentifierSourceFile($0)
}

try? outputString.write(toFile:outputPath, atomically: true, encoding: String.Encoding.utf8)
