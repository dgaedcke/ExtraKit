import Foundation
import Files

var tabs = 0
var outputString = ""

extension String {

	mutating func addLine(_ line: String = "") {

		if line.suffix(1) == "}" {
			tabs -= 1
		}
		if tabs > 0 {
			self += String(repeating: "\t", count: tabs)
		}

		self += "\(line)\n"

		if line.suffix(1) == "{" {
			tabs += 1
		}
	}

	func uncapitalized() -> String {
		return replacingCharacters(in: startIndex..<index(startIndex, offsetBy:1), with: self[startIndex...startIndex].lowercased())
	}

    func capitalizingFirstLetter() -> String {
      return prefix(1).uppercased() + self.dropFirst()
    }

	func isValidSwiftString() -> Bool {
		return swiftNameRegex.firstMatch(in: self, range: NSRange(location: 0, length: count)) != nil
	}

	func swiftName() -> String {
		return swiftNameReplaceRegex.stringByReplacingMatches(in: self, range: NSRange(location: 0, length: count), withTemplate: "").uncapitalized() ?? ""
	}
}

private let swiftNameRegex = try! NSRegularExpression(pattern: "^[A-Za-z_][A-Za-z_0-9]*$")
private let swiftNameReplaceRegex = try! NSRegularExpression(pattern: "[-\\s]")

func line(_ line: String = "") {
	outputString.addLine(line)
}

func autogeneratedLine() {
	var args = CommandLine.arguments
	args[0] = URL(string: args[0])!.lastPathComponent

	line("""
	// autogenerated from \(args.joined(separator: " "))

	""")
}

func output(to path: String) {
	try? outputString.write(toFile:path, atomically: true, encoding: String.Encoding.utf8)
}

func find<T: FileSystem.Item>(extension ext: [String], in sequence: FileSystemSequence<T>?) -> [URL] {
	var items = [URL]()
	sequence?.forEach { item in
		let url = URL(fileURLWithPath: item.path)
		if ext.contains(url.pathExtension) {
			items.append(url)
		}
	}
	return items
}

func findFiles(extension ext: [String], in path: String) -> [URL] {
	return find(extension: ext, in: try? Folder(path: path).makeFileSequence(recursive: true))
}

func findFolders(extension ext: [String], in path: String) -> [URL] {
	return find(extension: ext, in: try? Folder(path: path).makeSubfolderSequence(recursive: true))
}
